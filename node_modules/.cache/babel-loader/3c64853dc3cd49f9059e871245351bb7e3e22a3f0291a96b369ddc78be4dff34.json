{"ast":null,"code":"// add, remove cell\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(require('./core'), require('fizzy-ui-utils'));\n  } else {\n    // browser global\n    factory(window.Flickity, window.fizzyUIUtils);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(Flickity, utils) {\n  // append cells to a document fragment\n  function getCellsFragment(cells) {\n    let fragment = document.createDocumentFragment();\n    cells.forEach(cell => fragment.appendChild(cell.element));\n    return fragment;\n  }\n\n  // -------------------------- add/remove cell prototype -------------------------- //\n\n  let proto = Flickity.prototype;\n\n  /**\n   * Insert, prepend, or append cells\n   * @param {[Element, Array, NodeList]} elems - Elements to insert\n   * @param {Integer} index - Zero-based number to insert\n   */\n  proto.insert = function (elems, index) {\n    let cells = this._makeCells(elems);\n    if (!cells || !cells.length) return;\n    let len = this.cells.length;\n    // default to append\n    index = index === undefined ? len : index;\n    // add cells with document fragment\n    let fragment = getCellsFragment(cells);\n    // append to slider\n    let isAppend = index === len;\n    if (isAppend) {\n      this.slider.appendChild(fragment);\n    } else {\n      let insertCellElement = this.cells[index].element;\n      this.slider.insertBefore(fragment, insertCellElement);\n    }\n    // add to this.cells\n    if (index === 0) {\n      // prepend, add to start\n      this.cells = cells.concat(this.cells);\n    } else if (isAppend) {\n      // append, add to end\n      this.cells = this.cells.concat(cells);\n    } else {\n      // insert in this.cells\n      let endCells = this.cells.splice(index, len - index);\n      this.cells = this.cells.concat(cells).concat(endCells);\n    }\n    this._sizeCells(cells);\n    this.cellChange(index);\n    this.positionSliderAtSelected();\n  };\n  proto.append = function (elems) {\n    this.insert(elems, this.cells.length);\n  };\n  proto.prepend = function (elems) {\n    this.insert(elems, 0);\n  };\n\n  /**\n   * Remove cells\n   * @param {[Element, Array, NodeList]} elems - ELements to remove\n   */\n  proto.remove = function (elems) {\n    let cells = this.getCells(elems);\n    if (!cells || !cells.length) return;\n    let minCellIndex = this.cells.length - 1;\n    // remove cells from collection & DOM\n    cells.forEach(cell => {\n      cell.remove();\n      let index = this.cells.indexOf(cell);\n      minCellIndex = Math.min(index, minCellIndex);\n      utils.removeFrom(this.cells, cell);\n    });\n    this.cellChange(minCellIndex);\n    this.positionSliderAtSelected();\n  };\n\n  /**\n   * logic to be run after a cell's size changes\n   * @param {Element} elem - cell's element\n   */\n  proto.cellSizeChange = function (elem) {\n    let cell = this.getCell(elem);\n    if (!cell) return;\n    cell.getSize();\n    let index = this.cells.indexOf(cell);\n    this.cellChange(index);\n    // do not position slider after lazy load\n  };\n\n  /**\n   * logic any time a cell is changed: added, removed, or size changed\n   * @param {Integer} changedCellIndex - index of the changed cell, optional\n   */\n  proto.cellChange = function (changedCellIndex) {\n    let prevSelectedElem = this.selectedElement;\n    this._positionCells(changedCellIndex);\n    this._updateWrapShiftCells();\n    this.setGallerySize();\n    // update selectedIndex, try to maintain position & select previous selected element\n    let cell = this.getCell(prevSelectedElem);\n    if (cell) this.selectedIndex = this.getCellSlideIndex(cell);\n    this.selectedIndex = Math.min(this.slides.length - 1, this.selectedIndex);\n    this.emitEvent('cellChange', [changedCellIndex]);\n    // position slider\n    this.select(this.selectedIndex);\n  };\n\n  // -----  ----- //\n\n  return Flickity;\n});","map":{"version":3,"names":["window","factory","module","exports","require","Flickity","fizzyUIUtils","utils","getCellsFragment","cells","fragment","document","createDocumentFragment","forEach","cell","appendChild","element","proto","prototype","insert","elems","index","_makeCells","length","len","undefined","isAppend","slider","insertCellElement","insertBefore","concat","endCells","splice","_sizeCells","cellChange","positionSliderAtSelected","append","prepend","remove","getCells","minCellIndex","indexOf","Math","min","removeFrom","cellSizeChange","elem","getCell","getSize","changedCellIndex","prevSelectedElem","selectedElement","_positionCells","_updateWrapShiftCells","setGallerySize","selectedIndex","getCellSlideIndex","slides","emitEvent","select"],"sources":["E:/Intelliper/intelliper/node_modules/flickity/js/add-remove-cell.js"],"sourcesContent":["// add, remove cell\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        require('./core'),\n        require('fizzy-ui-utils'),\n    );\n  } else {\n    // browser global\n    factory(\n        window.Flickity,\n        window.fizzyUIUtils,\n    );\n  }\n\n}( typeof window != 'undefined' ? window : this, function factory( Flickity, utils ) {\n\n// append cells to a document fragment\nfunction getCellsFragment( cells ) {\n  let fragment = document.createDocumentFragment();\n  cells.forEach( ( cell ) => fragment.appendChild( cell.element ) );\n  return fragment;\n}\n\n// -------------------------- add/remove cell prototype -------------------------- //\n\nlet proto = Flickity.prototype;\n\n/**\n * Insert, prepend, or append cells\n * @param {[Element, Array, NodeList]} elems - Elements to insert\n * @param {Integer} index - Zero-based number to insert\n */\nproto.insert = function( elems, index ) {\n  let cells = this._makeCells( elems );\n  if ( !cells || !cells.length ) return;\n\n  let len = this.cells.length;\n  // default to append\n  index = index === undefined ? len : index;\n  // add cells with document fragment\n  let fragment = getCellsFragment( cells );\n  // append to slider\n  let isAppend = index === len;\n  if ( isAppend ) {\n    this.slider.appendChild( fragment );\n  } else {\n    let insertCellElement = this.cells[ index ].element;\n    this.slider.insertBefore( fragment, insertCellElement );\n  }\n  // add to this.cells\n  if ( index === 0 ) {\n    // prepend, add to start\n    this.cells = cells.concat( this.cells );\n  } else if ( isAppend ) {\n    // append, add to end\n    this.cells = this.cells.concat( cells );\n  } else {\n    // insert in this.cells\n    let endCells = this.cells.splice( index, len - index );\n    this.cells = this.cells.concat( cells ).concat( endCells );\n  }\n\n  this._sizeCells( cells );\n  this.cellChange( index );\n  this.positionSliderAtSelected();\n};\n\nproto.append = function( elems ) {\n  this.insert( elems, this.cells.length );\n};\n\nproto.prepend = function( elems ) {\n  this.insert( elems, 0 );\n};\n\n/**\n * Remove cells\n * @param {[Element, Array, NodeList]} elems - ELements to remove\n */\nproto.remove = function( elems ) {\n  let cells = this.getCells( elems );\n  if ( !cells || !cells.length ) return;\n\n  let minCellIndex = this.cells.length - 1;\n  // remove cells from collection & DOM\n  cells.forEach( ( cell ) => {\n    cell.remove();\n    let index = this.cells.indexOf( cell );\n    minCellIndex = Math.min( index, minCellIndex );\n    utils.removeFrom( this.cells, cell );\n  } );\n\n  this.cellChange( minCellIndex );\n  this.positionSliderAtSelected();\n};\n\n/**\n * logic to be run after a cell's size changes\n * @param {Element} elem - cell's element\n */\nproto.cellSizeChange = function( elem ) {\n  let cell = this.getCell( elem );\n  if ( !cell ) return;\n\n  cell.getSize();\n\n  let index = this.cells.indexOf( cell );\n  this.cellChange( index );\n  // do not position slider after lazy load\n};\n\n/**\n * logic any time a cell is changed: added, removed, or size changed\n * @param {Integer} changedCellIndex - index of the changed cell, optional\n */\nproto.cellChange = function( changedCellIndex ) {\n  let prevSelectedElem = this.selectedElement;\n  this._positionCells( changedCellIndex );\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n  // update selectedIndex, try to maintain position & select previous selected element\n  let cell = this.getCell( prevSelectedElem );\n  if ( cell ) this.selectedIndex = this.getCellSlideIndex( cell );\n  this.selectedIndex = Math.min( this.slides.length - 1, this.selectedIndex );\n\n  this.emitEvent( 'cellChange', [ changedCellIndex ] );\n  // position slider\n  this.select( this.selectedIndex );\n};\n\n// -----  ----- //\n\nreturn Flickity;\n\n} ) );\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}