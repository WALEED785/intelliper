{"ast":null,"code":"// Flickity main\n/* eslint-disable max-params */\n(function (window, factory) {\n  // universal module definition\n  if (typeof module == 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory(window, require('ev-emitter'), require('get-size'), require('fizzy-ui-utils'), require('./cell'), require('./slide'), require('./animate'));\n  } else {\n    // browser global\n    let _Flickity = window.Flickity;\n    window.Flickity = factory(window, window.EvEmitter, window.getSize, window.fizzyUIUtils, _Flickity.Cell, _Flickity.Slide, _Flickity.animatePrototype);\n  }\n})(typeof window != 'undefined' ? window : this, function factory(window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype) {\n  /* eslint-enable max-params */\n\n  // vars\n  const {\n    getComputedStyle,\n    console\n  } = window;\n  let {\n    jQuery\n  } = window;\n\n  // -------------------------- Flickity -------------------------- //\n\n  // globally unique identifiers\n  let GUID = 0;\n  // internal store of all Flickity intances\n  let instances = {};\n  function Flickity(element, options) {\n    let queryElement = utils.getQueryElement(element);\n    if (!queryElement) {\n      if (console) console.error(`Bad element for Flickity: ${queryElement || element}`);\n      return;\n    }\n    this.element = queryElement;\n    // do not initialize twice on same element\n    if (this.element.flickityGUID) {\n      let instance = instances[this.element.flickityGUID];\n      if (instance) instance.option(options);\n      return instance;\n    }\n\n    // add jQuery\n    if (jQuery) {\n      this.$element = jQuery(this.element);\n    }\n    // options\n    this.options = {\n      ...this.constructor.defaults\n    };\n    this.option(options);\n\n    // kick things off\n    this._create();\n  }\n  Flickity.defaults = {\n    accessibility: true,\n    // adaptiveHeight: false,\n    cellAlign: 'center',\n    // cellSelector: undefined,\n    // contain: false,\n    freeScrollFriction: 0.075,\n    // friction when free-scrolling\n    friction: 0.28,\n    // friction when selecting\n    namespaceJQueryEvents: true,\n    // initialIndex: 0,\n    percentPosition: true,\n    resize: true,\n    selectedAttraction: 0.025,\n    setGallerySize: true\n    // watchCSS: false,\n    // wrapAround: false\n  };\n\n  // hash of methods triggered on _create()\n  Flickity.create = {};\n  let proto = Flickity.prototype;\n  // inherit EventEmitter\n  Object.assign(proto, EvEmitter.prototype);\n  proto._create = function () {\n    let {\n      resize,\n      watchCSS,\n      rightToLeft\n    } = this.options;\n    // add id for Flickity.data\n    let id = this.guid = ++GUID;\n    this.element.flickityGUID = id; // expando\n    instances[id] = this; // associate via id\n    // initial properties\n    this.selectedIndex = 0;\n    // how many frames slider has been in same position\n    this.restingFrames = 0;\n    // initial physics properties\n    this.x = 0;\n    this.velocity = 0;\n    this.beginMargin = rightToLeft ? 'marginRight' : 'marginLeft';\n    this.endMargin = rightToLeft ? 'marginLeft' : 'marginRight';\n    // create viewport & slider\n    this.viewport = document.createElement('div');\n    this.viewport.className = 'flickity-viewport';\n    this._createSlider();\n    // used for keyboard navigation\n    this.focusableElems = [this.element];\n    if (resize || watchCSS) {\n      window.addEventListener('resize', this);\n    }\n\n    // add listeners from on option\n    for (let eventName in this.options.on) {\n      let listener = this.options.on[eventName];\n      this.on(eventName, listener);\n    }\n    for (let method in Flickity.create) {\n      Flickity.create[method].call(this);\n    }\n    if (watchCSS) {\n      this.watchCSS();\n    } else {\n      this.activate();\n    }\n  };\n\n  /**\n   * set options\n   * @param {Object} opts - options to extend\n   */\n  proto.option = function (opts) {\n    Object.assign(this.options, opts);\n  };\n  proto.activate = function () {\n    if (this.isActive) return;\n    this.isActive = true;\n    this.element.classList.add('flickity-enabled');\n    if (this.options.rightToLeft) {\n      this.element.classList.add('flickity-rtl');\n    }\n    this.getSize();\n    // move initial cell elements so they can be loaded as cells\n    let cellElems = this._filterFindCellElements(this.element.children);\n    this.slider.append(...cellElems);\n    this.viewport.append(this.slider);\n    this.element.append(this.viewport);\n    // get cells from children\n    this.reloadCells();\n    if (this.options.accessibility) {\n      // allow element to focusable\n      this.element.tabIndex = 0;\n      // listen for key presses\n      this.element.addEventListener('keydown', this);\n    }\n    this.emitEvent('activate');\n    this.selectInitialIndex();\n    // flag for initial activation, for using initialIndex\n    this.isInitActivated = true;\n    // ready event. #493\n    this.dispatchEvent('ready');\n  };\n\n  // slider positions the cells\n  proto._createSlider = function () {\n    // slider element does all the positioning\n    let slider = document.createElement('div');\n    slider.className = 'flickity-slider';\n    this.slider = slider;\n  };\n  proto._filterFindCellElements = function (elems) {\n    return utils.filterFindElements(elems, this.options.cellSelector);\n  };\n\n  // goes through all children\n  proto.reloadCells = function () {\n    // collection of item elements\n    this.cells = this._makeCells(this.slider.children);\n    this.positionCells();\n    this._updateWrapShiftCells();\n    this.setGallerySize();\n  };\n\n  /**\n   * turn elements into Flickity.Cells\n   * @param {[Array, NodeList, HTMLElement]} elems - elements to make into cells\n   * @returns {Array} items - collection of new Flickity Cells\n   */\n  proto._makeCells = function (elems) {\n    let cellElems = this._filterFindCellElements(elems);\n\n    // create new Cells for collection\n    return cellElems.map(cellElem => new Cell(cellElem));\n  };\n  proto.getLastCell = function () {\n    return this.cells[this.cells.length - 1];\n  };\n  proto.getLastSlide = function () {\n    return this.slides[this.slides.length - 1];\n  };\n\n  // positions all cells\n  proto.positionCells = function () {\n    // size all cells\n    this._sizeCells(this.cells);\n    // position all cells\n    this._positionCells(0);\n  };\n\n  /**\n   * position certain cells\n   * @param {Integer} index - which cell to start with\n   */\n  proto._positionCells = function (index) {\n    index = index || 0;\n    // also measure maxCellHeight\n    // start 0 if positioning all cells\n    this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;\n    let cellX = 0;\n    // get cellX\n    if (index > 0) {\n      let startCell = this.cells[index - 1];\n      cellX = startCell.x + startCell.size.outerWidth;\n    }\n    this.cells.slice(index).forEach(cell => {\n      cell.x = cellX;\n      this._renderCellPosition(cell, cellX);\n      cellX += cell.size.outerWidth;\n      this.maxCellHeight = Math.max(cell.size.outerHeight, this.maxCellHeight);\n    });\n    // keep track of cellX for wrap-around\n    this.slideableWidth = cellX;\n    // slides\n    this.updateSlides();\n    // contain slides target\n    this._containSlides();\n    // update slidesWidth\n    this.slidesWidth = this.cells.length ? this.getLastSlide().target - this.slides[0].target : 0;\n  };\n  proto._renderCellPosition = function (cell, x) {\n    // render position of cell with in slider\n    let sideOffset = this.options.rightToLeft ? -1 : 1;\n    let renderX = x * sideOffset;\n    if (this.options.percentPosition) renderX *= this.size.innerWidth / cell.size.width;\n    let positionValue = this.getPositionValue(renderX);\n    cell.element.style.transform = `translateX( ${positionValue} )`;\n  };\n\n  /**\n   * cell.getSize() on multiple cells\n   * @param {Array} cells - cells to size\n   */\n  proto._sizeCells = function (cells) {\n    cells.forEach(cell => cell.getSize());\n  };\n\n  // --------------------------  -------------------------- //\n\n  proto.updateSlides = function () {\n    this.slides = [];\n    if (!this.cells.length) return;\n    let {\n      beginMargin,\n      endMargin\n    } = this;\n    let slide = new Slide(beginMargin, endMargin, this.cellAlign);\n    this.slides.push(slide);\n    let canCellFit = this._getCanCellFit();\n    this.cells.forEach((cell, i) => {\n      // just add cell if first cell in slide\n      if (!slide.cells.length) {\n        slide.addCell(cell);\n        return;\n      }\n      let slideWidth = slide.outerWidth - slide.firstMargin + (cell.size.outerWidth - cell.size[endMargin]);\n      if (canCellFit(i, slideWidth)) {\n        slide.addCell(cell);\n      } else {\n        // doesn't fit, new slide\n        slide.updateTarget();\n        slide = new Slide(beginMargin, endMargin, this.cellAlign);\n        this.slides.push(slide);\n        slide.addCell(cell);\n      }\n    });\n    // last slide\n    slide.updateTarget();\n    // update .selectedSlide\n    this.updateSelectedSlide();\n  };\n  proto._getCanCellFit = function () {\n    let {\n      groupCells\n    } = this.options;\n    if (!groupCells) return () => false;\n    if (typeof groupCells == 'number') {\n      // group by number. 3 -> [0,1,2], [3,4,5], ...\n      let number = parseInt(groupCells, 10);\n      return i => i % number !== 0;\n    }\n    // default, group by width of slide\n    let percent = 1;\n    // parse '75%\n    let percentMatch = typeof groupCells == 'string' && groupCells.match(/^(\\d+)%$/);\n    if (percentMatch) percent = parseInt(percentMatch[1], 10) / 100;\n    let groupWidth = (this.size.innerWidth + 1) * percent;\n    return (i, slideWidth) => slideWidth <= groupWidth;\n  };\n\n  // alias _init for jQuery plugin .flickity()\n  proto._init = proto.reposition = function () {\n    this.positionCells();\n    this.positionSliderAtSelected();\n  };\n  proto.getSize = function () {\n    this.size = getSize(this.element);\n    this.setCellAlign();\n    this.cursorPosition = this.size.innerWidth * this.cellAlign;\n  };\n  let cellAlignShorthands = {\n    left: 0,\n    center: 0.5,\n    right: 1\n  };\n  proto.setCellAlign = function () {\n    let {\n      cellAlign,\n      rightToLeft\n    } = this.options;\n    let shorthand = cellAlignShorthands[cellAlign];\n    this.cellAlign = shorthand !== undefined ? shorthand : cellAlign;\n    if (rightToLeft) this.cellAlign = 1 - this.cellAlign;\n  };\n  proto.setGallerySize = function () {\n    if (!this.options.setGallerySize) return;\n    let height = this.options.adaptiveHeight && this.selectedSlide ? this.selectedSlide.height : this.maxCellHeight;\n    this.viewport.style.height = `${height}px`;\n  };\n  proto._updateWrapShiftCells = function () {\n    // update isWrapping\n    this.isWrapping = this.getIsWrapping();\n    // only for wrap-around\n    if (!this.isWrapping) return;\n\n    // unshift previous cells\n    this._unshiftCells(this.beforeShiftCells);\n    this._unshiftCells(this.afterShiftCells);\n    // get before cells\n    // initial gap\n    let beforeGapX = this.cursorPosition;\n    let lastIndex = this.cells.length - 1;\n    this.beforeShiftCells = this._getGapCells(beforeGapX, lastIndex, -1);\n    // get after cells\n    // ending gap between last cell and end of gallery viewport\n    let afterGapX = this.size.innerWidth - this.cursorPosition;\n    // start cloning at first cell, working forwards\n    this.afterShiftCells = this._getGapCells(afterGapX, 0, 1);\n  };\n  proto.getIsWrapping = function () {\n    let {\n      wrapAround\n    } = this.options;\n    if (!wrapAround || this.slides.length < 2) return false;\n    if (wrapAround !== 'fill') return true;\n    // check that slides can fit\n\n    let gapWidth = this.slideableWidth - this.size.innerWidth;\n    if (gapWidth > this.size.innerWidth) return true; // gap * 2x big, all good\n    // check that content width - shifting cell is bigger than viewport width\n    for (let cell of this.cells) {\n      if (cell.size.outerWidth > gapWidth) return false;\n    }\n    return true;\n  };\n  proto._getGapCells = function (gapX, cellIndex, increment) {\n    // keep adding cells until the cover the initial gap\n    let cells = [];\n    while (gapX > 0) {\n      let cell = this.cells[cellIndex];\n      if (!cell) break;\n      cells.push(cell);\n      cellIndex += increment;\n      gapX -= cell.size.outerWidth;\n    }\n    return cells;\n  };\n\n  // ----- contain & wrap ----- //\n\n  // contain cell targets so no excess sliding\n  proto._containSlides = function () {\n    let isContaining = this.options.contain && !this.isWrapping && this.cells.length;\n    if (!isContaining) return;\n    let contentWidth = this.slideableWidth - this.getLastCell().size[this.endMargin];\n    // content is less than gallery size\n    let isContentSmaller = contentWidth < this.size.innerWidth;\n    if (isContentSmaller) {\n      // all cells fit inside gallery\n      this.slides.forEach(slide => {\n        slide.target = contentWidth * this.cellAlign;\n      });\n    } else {\n      // contain to bounds\n      let beginBound = this.cursorPosition + this.cells[0].size[this.beginMargin];\n      let endBound = contentWidth - this.size.innerWidth * (1 - this.cellAlign);\n      this.slides.forEach(slide => {\n        slide.target = Math.max(slide.target, beginBound);\n        slide.target = Math.min(slide.target, endBound);\n      });\n    }\n  };\n\n  // ----- events ----- //\n\n  /**\n   * emits events via eventEmitter and jQuery events\n   * @param {String} type - name of event\n   * @param {Event} event - original event\n   * @param {Array} args - extra arguments\n   */\n  proto.dispatchEvent = function (type, event, args) {\n    let emitArgs = event ? [event].concat(args) : args;\n    this.emitEvent(type, emitArgs);\n    if (jQuery && this.$element) {\n      // default trigger with type if no event\n      type += this.options.namespaceJQueryEvents ? '.flickity' : '';\n      let $event = type;\n      if (event) {\n        // create jQuery event\n        let jQEvent = new jQuery.Event(event);\n        jQEvent.type = type;\n        $event = jQEvent;\n      }\n      this.$element.trigger($event, args);\n    }\n  };\n  const unidraggerEvents = ['dragStart', 'dragMove', 'dragEnd', 'pointerDown', 'pointerMove', 'pointerEnd', 'staticClick'];\n  let _emitEvent = proto.emitEvent;\n  proto.emitEvent = function (eventName, args) {\n    if (eventName === 'staticClick') {\n      // add cellElem and cellIndex args to staticClick\n      let clickedCell = this.getParentCell(args[0].target);\n      let cellElem = clickedCell && clickedCell.element;\n      let cellIndex = clickedCell && this.cells.indexOf(clickedCell);\n      args = args.concat(cellElem, cellIndex);\n    }\n    // do regular thing\n    _emitEvent.call(this, eventName, args);\n    // duck-punch in jQuery events for Unidragger events\n    let isUnidraggerEvent = unidraggerEvents.includes(eventName);\n    if (!isUnidraggerEvent || !jQuery || !this.$element) return;\n    eventName += this.options.namespaceJQueryEvents ? '.flickity' : '';\n    let event = args.shift(0);\n    let jQEvent = new jQuery.Event(event);\n    jQEvent.type = eventName;\n    this.$element.trigger(jQEvent, args);\n  };\n\n  // -------------------------- select -------------------------- //\n\n  /**\n   * @param {Integer} index - index of the slide\n   * @param {Boolean} isWrap - will wrap-around to last/first if at the end\n   * @param {Boolean} isInstant - will immediately set position at selected cell\n   */\n  proto.select = function (index, isWrap, isInstant) {\n    if (!this.isActive) return;\n    index = parseInt(index, 10);\n    this._wrapSelect(index);\n    if (this.isWrapping || isWrap) {\n      index = utils.modulo(index, this.slides.length);\n    }\n    // bail if invalid index\n    if (!this.slides[index]) return;\n    let prevIndex = this.selectedIndex;\n    this.selectedIndex = index;\n    this.updateSelectedSlide();\n    if (isInstant) {\n      this.positionSliderAtSelected();\n    } else {\n      this.startAnimation();\n    }\n    if (this.options.adaptiveHeight) {\n      this.setGallerySize();\n    }\n    // events\n    this.dispatchEvent('select', null, [index]);\n    // change event if new index\n    if (index !== prevIndex) {\n      this.dispatchEvent('change', null, [index]);\n    }\n  };\n\n  // wraps position for wrapAround, to move to closest slide. #113\n  proto._wrapSelect = function (index) {\n    if (!this.isWrapping) return;\n    const {\n      selectedIndex,\n      slideableWidth,\n      slides: {\n        length\n      }\n    } = this;\n    // shift index for wrap, do not wrap dragSelect\n    if (!this.isDragSelect) {\n      let wrapIndex = utils.modulo(index, length);\n      // go to shortest\n      let delta = Math.abs(wrapIndex - selectedIndex);\n      let backWrapDelta = Math.abs(wrapIndex + length - selectedIndex);\n      let forewardWrapDelta = Math.abs(wrapIndex - length - selectedIndex);\n      if (backWrapDelta < delta) {\n        index += length;\n      } else if (forewardWrapDelta < delta) {\n        index -= length;\n      }\n    }\n\n    // wrap position so slider is within normal area\n    if (index < 0) {\n      this.x -= slideableWidth;\n    } else if (index >= length) {\n      this.x += slideableWidth;\n    }\n  };\n  proto.previous = function (isWrap, isInstant) {\n    this.select(this.selectedIndex - 1, isWrap, isInstant);\n  };\n  proto.next = function (isWrap, isInstant) {\n    this.select(this.selectedIndex + 1, isWrap, isInstant);\n  };\n  proto.updateSelectedSlide = function () {\n    let slide = this.slides[this.selectedIndex];\n    // selectedIndex could be outside of slides, if triggered before resize()\n    if (!slide) return;\n\n    // unselect previous selected slide\n    this.unselectSelectedSlide();\n    // update new selected slide\n    this.selectedSlide = slide;\n    slide.select();\n    this.selectedCells = slide.cells;\n    this.selectedElements = slide.getCellElements();\n    // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility\n    this.selectedCell = slide.cells[0];\n    this.selectedElement = this.selectedElements[0];\n  };\n  proto.unselectSelectedSlide = function () {\n    if (this.selectedSlide) this.selectedSlide.unselect();\n  };\n  proto.selectInitialIndex = function () {\n    let initialIndex = this.options.initialIndex;\n    // already activated, select previous selectedIndex\n    if (this.isInitActivated) {\n      this.select(this.selectedIndex, false, true);\n      return;\n    }\n    // select with selector string\n    if (initialIndex && typeof initialIndex == 'string') {\n      let cell = this.queryCell(initialIndex);\n      if (cell) {\n        this.selectCell(initialIndex, false, true);\n        return;\n      }\n    }\n    let index = 0;\n    // select with number\n    if (initialIndex && this.slides[initialIndex]) {\n      index = initialIndex;\n    }\n    // select instantly\n    this.select(index, false, true);\n  };\n\n  /**\n   * select slide from number or cell element\n   * @param {[Element, Number]} value - zero-based index or element to select\n   * @param {Boolean} isWrap - enables wrapping around for extra index\n   * @param {Boolean} isInstant - disables slide animation\n   */\n  proto.selectCell = function (value, isWrap, isInstant) {\n    // get cell\n    let cell = this.queryCell(value);\n    if (!cell) return;\n    let index = this.getCellSlideIndex(cell);\n    this.select(index, isWrap, isInstant);\n  };\n  proto.getCellSlideIndex = function (cell) {\n    // get index of slide that has cell\n    let cellSlide = this.slides.find(slide => slide.cells.includes(cell));\n    return this.slides.indexOf(cellSlide);\n  };\n\n  // -------------------------- get cells -------------------------- //\n\n  /**\n   * get Flickity.Cell, given an Element\n   * @param {Element} elem - matching cell element\n   * @returns {Flickity.Cell} cell - matching cell\n   */\n  proto.getCell = function (elem) {\n    // loop through cells to get the one that matches\n    for (let cell of this.cells) {\n      if (cell.element === elem) return cell;\n    }\n  };\n\n  /**\n   * get collection of Flickity.Cells, given Elements\n   * @param {[Element, Array, NodeList]} elems - multiple elements\n   * @returns {Array} cells - Flickity.Cells\n   */\n  proto.getCells = function (elems) {\n    elems = utils.makeArray(elems);\n    return elems.map(elem => this.getCell(elem)).filter(Boolean);\n  };\n\n  /**\n   * get cell elements\n   * @returns {Array} cellElems\n   */\n  proto.getCellElements = function () {\n    return this.cells.map(cell => cell.element);\n  };\n\n  /**\n   * get parent cell from an element\n   * @param {Element} elem - child element\n   * @returns {Flickit.Cell} cell - parent cell\n   */\n  proto.getParentCell = function (elem) {\n    // first check if elem is cell\n    let cell = this.getCell(elem);\n    if (cell) return cell;\n\n    // try to get parent cell elem\n    let closest = elem.closest('.flickity-slider > *');\n    return this.getCell(closest);\n  };\n\n  /**\n   * get cells adjacent to a slide\n   * @param {Integer} adjCount - number of adjacent slides\n   * @param {Integer} index - index of slide to start\n   * @returns {Array} cells - array of Flickity.Cells\n   */\n  proto.getAdjacentCellElements = function (adjCount, index) {\n    if (!adjCount) return this.selectedSlide.getCellElements();\n    index = index === undefined ? this.selectedIndex : index;\n    let len = this.slides.length;\n    if (1 + adjCount * 2 >= len) {\n      return this.getCellElements(); // get all\n    }\n\n    let cellElems = [];\n    for (let i = index - adjCount; i <= index + adjCount; i++) {\n      let slideIndex = this.isWrapping ? utils.modulo(i, len) : i;\n      let slide = this.slides[slideIndex];\n      if (slide) {\n        cellElems = cellElems.concat(slide.getCellElements());\n      }\n    }\n    return cellElems;\n  };\n\n  /**\n   * select slide from number or cell element\n   * @param {[Element, String, Number]} selector - element, selector string, or index\n   * @returns {Flickity.Cell} - matching cell\n   */\n  proto.queryCell = function (selector) {\n    if (typeof selector == 'number') {\n      // use number as index\n      return this.cells[selector];\n    }\n    // do not select invalid selectors from hash: #123, #/. #791\n    let isSelectorString = typeof selector == 'string' && !selector.match(/^[#.]?[\\d/]/);\n    if (isSelectorString) {\n      // use string as selector, get element\n      selector = this.element.querySelector(selector);\n    }\n    // get cell from element\n    return this.getCell(selector);\n  };\n\n  // -------------------------- events -------------------------- //\n\n  proto.uiChange = function () {\n    this.emitEvent('uiChange');\n  };\n\n  // ----- resize ----- //\n\n  proto.onresize = function () {\n    this.watchCSS();\n    this.resize();\n  };\n  utils.debounceMethod(Flickity, 'onresize', 150);\n  proto.resize = function () {\n    // #1177 disable resize behavior when animating or dragging for iOS 15\n    if (!this.isActive || this.isAnimating || this.isDragging) return;\n    this.getSize();\n    // wrap values\n    if (this.isWrapping) {\n      this.x = utils.modulo(this.x, this.slideableWidth);\n    }\n    this.positionCells();\n    this._updateWrapShiftCells();\n    this.setGallerySize();\n    this.emitEvent('resize');\n    // update selected index for group slides, instant\n    // TODO: position can be lost between groups of various numbers\n    let selectedElement = this.selectedElements && this.selectedElements[0];\n    this.selectCell(selectedElement, false, true);\n  };\n\n  // watches the :after property, activates/deactivates\n  proto.watchCSS = function () {\n    if (!this.options.watchCSS) return;\n    let afterContent = getComputedStyle(this.element, ':after').content;\n    // activate if :after { content: 'flickity' }\n    if (afterContent.includes('flickity')) {\n      this.activate();\n    } else {\n      this.deactivate();\n    }\n  };\n\n  // ----- keydown ----- //\n\n  // go previous/next if left/right keys pressed\n  proto.onkeydown = function (event) {\n    let {\n      activeElement\n    } = document;\n    let handler = Flickity.keyboardHandlers[event.key];\n    // only work if element is in focus\n    if (!this.options.accessibility || !activeElement || !handler) return;\n    let isFocused = this.focusableElems.some(elem => activeElement === elem);\n    if (isFocused) handler.call(this);\n  };\n  Flickity.keyboardHandlers = {\n    ArrowLeft: function () {\n      this.uiChange();\n      let leftMethod = this.options.rightToLeft ? 'next' : 'previous';\n      this[leftMethod]();\n    },\n    ArrowRight: function () {\n      this.uiChange();\n      let rightMethod = this.options.rightToLeft ? 'previous' : 'next';\n      this[rightMethod]();\n    }\n  };\n\n  // ----- focus ----- //\n\n  proto.focus = function () {\n    this.element.focus({\n      preventScroll: true\n    });\n  };\n\n  // -------------------------- destroy -------------------------- //\n\n  // deactivate all Flickity functionality, but keep stuff available\n  proto.deactivate = function () {\n    if (!this.isActive) return;\n    this.element.classList.remove('flickity-enabled');\n    this.element.classList.remove('flickity-rtl');\n    this.unselectSelectedSlide();\n    // destroy cells\n    this.cells.forEach(cell => cell.destroy());\n    this.viewport.remove();\n    // move child elements back into element\n    this.element.append(...this.slider.children);\n    if (this.options.accessibility) {\n      this.element.removeAttribute('tabIndex');\n      this.element.removeEventListener('keydown', this);\n    }\n    // set flags\n    this.isActive = false;\n    this.emitEvent('deactivate');\n  };\n  proto.destroy = function () {\n    this.deactivate();\n    window.removeEventListener('resize', this);\n    this.allOff();\n    this.emitEvent('destroy');\n    if (jQuery && this.$element) {\n      jQuery.removeData(this.element, 'flickity');\n    }\n    delete this.element.flickityGUID;\n    delete instances[this.guid];\n  };\n\n  // -------------------------- prototype -------------------------- //\n\n  Object.assign(proto, animatePrototype);\n\n  // -------------------------- extras -------------------------- //\n\n  /**\n   * get Flickity instance from element\n   * @param {[Element, String]} elem - element or selector string\n   * @returns {Flickity} - Flickity instance\n   */\n  Flickity.data = function (elem) {\n    elem = utils.getQueryElement(elem);\n    if (elem) return instances[elem.flickityGUID];\n  };\n  utils.htmlInit(Flickity, 'flickity');\n  let {\n    jQueryBridget\n  } = window;\n  if (jQuery && jQueryBridget) {\n    jQueryBridget('flickity', Flickity, jQuery);\n  }\n\n  // set internal jQuery, for Webpack + jQuery v3, #478\n  Flickity.setJQuery = function (jq) {\n    jQuery = jq;\n  };\n  Flickity.Cell = Cell;\n  Flickity.Slide = Slide;\n  return Flickity;\n});","map":{"version":3,"names":["window","factory","module","exports","require","_Flickity","Flickity","EvEmitter","getSize","fizzyUIUtils","Cell","Slide","animatePrototype","utils","getComputedStyle","console","jQuery","GUID","instances","element","options","queryElement","getQueryElement","error","flickityGUID","instance","option","$element","constructor","defaults","_create","accessibility","cellAlign","freeScrollFriction","friction","namespaceJQueryEvents","percentPosition","resize","selectedAttraction","setGallerySize","create","proto","prototype","Object","assign","watchCSS","rightToLeft","id","guid","selectedIndex","restingFrames","x","velocity","beginMargin","endMargin","viewport","document","createElement","className","_createSlider","focusableElems","addEventListener","eventName","on","listener","method","call","activate","opts","isActive","classList","add","cellElems","_filterFindCellElements","children","slider","append","reloadCells","tabIndex","emitEvent","selectInitialIndex","isInitActivated","dispatchEvent","elems","filterFindElements","cellSelector","cells","_makeCells","positionCells","_updateWrapShiftCells","map","cellElem","getLastCell","length","getLastSlide","slides","_sizeCells","_positionCells","index","maxCellHeight","cellX","startCell","size","outerWidth","slice","forEach","cell","_renderCellPosition","Math","max","outerHeight","slideableWidth","updateSlides","_containSlides","slidesWidth","target","sideOffset","renderX","innerWidth","width","positionValue","getPositionValue","style","transform","slide","push","canCellFit","_getCanCellFit","i","addCell","slideWidth","firstMargin","updateTarget","updateSelectedSlide","groupCells","number","parseInt","percent","percentMatch","match","groupWidth","_init","reposition","positionSliderAtSelected","setCellAlign","cursorPosition","cellAlignShorthands","left","center","right","shorthand","undefined","height","adaptiveHeight","selectedSlide","isWrapping","getIsWrapping","_unshiftCells","beforeShiftCells","afterShiftCells","beforeGapX","lastIndex","_getGapCells","afterGapX","wrapAround","gapWidth","gapX","cellIndex","increment","isContaining","contain","contentWidth","isContentSmaller","beginBound","endBound","min","type","event","args","emitArgs","concat","$event","jQEvent","Event","trigger","unidraggerEvents","_emitEvent","clickedCell","getParentCell","indexOf","isUnidraggerEvent","includes","shift","select","isWrap","isInstant","_wrapSelect","modulo","prevIndex","startAnimation","isDragSelect","wrapIndex","delta","abs","backWrapDelta","forewardWrapDelta","previous","next","unselectSelectedSlide","selectedCells","selectedElements","getCellElements","selectedCell","selectedElement","unselect","initialIndex","queryCell","selectCell","value","getCellSlideIndex","cellSlide","find","getCell","elem","getCells","makeArray","filter","Boolean","closest","getAdjacentCellElements","adjCount","len","slideIndex","selector","isSelectorString","querySelector","uiChange","onresize","debounceMethod","isAnimating","isDragging","afterContent","content","deactivate","onkeydown","activeElement","handler","keyboardHandlers","key","isFocused","some","ArrowLeft","leftMethod","ArrowRight","rightMethod","focus","preventScroll","remove","destroy","removeAttribute","removeEventListener","allOff","removeData","data","htmlInit","jQueryBridget","setJQuery","jq"],"sources":["E:/Intelliper/intelliper/node_modules/flickity/js/core.js"],"sourcesContent":["// Flickity main\n/* eslint-disable max-params */\n( function( window, factory ) {\n  // universal module definition\n  if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n        window,\n        require('ev-emitter'),\n        require('get-size'),\n        require('fizzy-ui-utils'),\n        require('./cell'),\n        require('./slide'),\n        require('./animate'),\n    );\n  } else {\n    // browser global\n    let _Flickity = window.Flickity;\n\n    window.Flickity = factory(\n        window,\n        window.EvEmitter,\n        window.getSize,\n        window.fizzyUIUtils,\n        _Flickity.Cell,\n        _Flickity.Slide,\n        _Flickity.animatePrototype,\n    );\n  }\n\n}( typeof window != 'undefined' ? window : this,\n    function factory( window, EvEmitter, getSize, utils, Cell, Slide, animatePrototype ) {\n/* eslint-enable max-params */\n\n// vars\nconst { getComputedStyle, console } = window;\nlet { jQuery } = window;\n\n// -------------------------- Flickity -------------------------- //\n\n// globally unique identifiers\nlet GUID = 0;\n// internal store of all Flickity intances\nlet instances = {};\n\nfunction Flickity( element, options ) {\n  let queryElement = utils.getQueryElement( element );\n  if ( !queryElement ) {\n    if ( console ) console.error(`Bad element for Flickity: ${queryElement || element}`);\n    return;\n  }\n  this.element = queryElement;\n  // do not initialize twice on same element\n  if ( this.element.flickityGUID ) {\n    let instance = instances[ this.element.flickityGUID ];\n    if ( instance ) instance.option( options );\n    return instance;\n  }\n\n  // add jQuery\n  if ( jQuery ) {\n    this.$element = jQuery( this.element );\n  }\n  // options\n  this.options = { ...this.constructor.defaults };\n  this.option( options );\n\n  // kick things off\n  this._create();\n}\n\nFlickity.defaults = {\n  accessibility: true,\n  // adaptiveHeight: false,\n  cellAlign: 'center',\n  // cellSelector: undefined,\n  // contain: false,\n  freeScrollFriction: 0.075, // friction when free-scrolling\n  friction: 0.28, // friction when selecting\n  namespaceJQueryEvents: true,\n  // initialIndex: 0,\n  percentPosition: true,\n  resize: true,\n  selectedAttraction: 0.025,\n  setGallerySize: true,\n  // watchCSS: false,\n  // wrapAround: false\n};\n\n// hash of methods triggered on _create()\nFlickity.create = {};\n\nlet proto = Flickity.prototype;\n// inherit EventEmitter\nObject.assign( proto, EvEmitter.prototype );\n\nproto._create = function() {\n  let { resize, watchCSS, rightToLeft } = this.options;\n  // add id for Flickity.data\n  let id = this.guid = ++GUID;\n  this.element.flickityGUID = id; // expando\n  instances[ id ] = this; // associate via id\n  // initial properties\n  this.selectedIndex = 0;\n  // how many frames slider has been in same position\n  this.restingFrames = 0;\n  // initial physics properties\n  this.x = 0;\n  this.velocity = 0;\n  this.beginMargin = rightToLeft ? 'marginRight' : 'marginLeft';\n  this.endMargin = rightToLeft ? 'marginLeft' : 'marginRight';\n  // create viewport & slider\n  this.viewport = document.createElement('div');\n  this.viewport.className = 'flickity-viewport';\n  this._createSlider();\n  // used for keyboard navigation\n  this.focusableElems = [ this.element ];\n\n  if ( resize || watchCSS ) {\n    window.addEventListener( 'resize', this );\n  }\n\n  // add listeners from on option\n  for ( let eventName in this.options.on ) {\n    let listener = this.options.on[ eventName ];\n    this.on( eventName, listener );\n  }\n\n  for ( let method in Flickity.create ) {\n    Flickity.create[ method ].call( this );\n  }\n\n  if ( watchCSS ) {\n    this.watchCSS();\n  } else {\n    this.activate();\n  }\n};\n\n/**\n * set options\n * @param {Object} opts - options to extend\n */\nproto.option = function( opts ) {\n  Object.assign( this.options, opts );\n};\n\nproto.activate = function() {\n  if ( this.isActive ) return;\n\n  this.isActive = true;\n  this.element.classList.add('flickity-enabled');\n  if ( this.options.rightToLeft ) {\n    this.element.classList.add('flickity-rtl');\n  }\n\n  this.getSize();\n  // move initial cell elements so they can be loaded as cells\n  let cellElems = this._filterFindCellElements( this.element.children );\n  this.slider.append( ...cellElems );\n  this.viewport.append( this.slider );\n  this.element.append( this.viewport );\n  // get cells from children\n  this.reloadCells();\n\n  if ( this.options.accessibility ) {\n    // allow element to focusable\n    this.element.tabIndex = 0;\n    // listen for key presses\n    this.element.addEventListener( 'keydown', this );\n  }\n\n  this.emitEvent('activate');\n  this.selectInitialIndex();\n  // flag for initial activation, for using initialIndex\n  this.isInitActivated = true;\n  // ready event. #493\n  this.dispatchEvent('ready');\n};\n\n// slider positions the cells\nproto._createSlider = function() {\n  // slider element does all the positioning\n  let slider = document.createElement('div');\n  slider.className = 'flickity-slider';\n  this.slider = slider;\n};\n\nproto._filterFindCellElements = function( elems ) {\n  return utils.filterFindElements( elems, this.options.cellSelector );\n};\n\n// goes through all children\nproto.reloadCells = function() {\n  // collection of item elements\n  this.cells = this._makeCells( this.slider.children );\n  this.positionCells();\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n};\n\n/**\n * turn elements into Flickity.Cells\n * @param {[Array, NodeList, HTMLElement]} elems - elements to make into cells\n * @returns {Array} items - collection of new Flickity Cells\n */\nproto._makeCells = function( elems ) {\n  let cellElems = this._filterFindCellElements( elems );\n\n  // create new Cells for collection\n  return cellElems.map( ( cellElem ) => new Cell( cellElem ) );\n};\n\nproto.getLastCell = function() {\n  return this.cells[ this.cells.length - 1 ];\n};\n\nproto.getLastSlide = function() {\n  return this.slides[ this.slides.length - 1 ];\n};\n\n// positions all cells\nproto.positionCells = function() {\n  // size all cells\n  this._sizeCells( this.cells );\n  // position all cells\n  this._positionCells( 0 );\n};\n\n/**\n * position certain cells\n * @param {Integer} index - which cell to start with\n */\nproto._positionCells = function( index ) {\n  index = index || 0;\n  // also measure maxCellHeight\n  // start 0 if positioning all cells\n  this.maxCellHeight = index ? this.maxCellHeight || 0 : 0;\n  let cellX = 0;\n  // get cellX\n  if ( index > 0 ) {\n    let startCell = this.cells[ index - 1 ];\n    cellX = startCell.x + startCell.size.outerWidth;\n  }\n\n  this.cells.slice( index ).forEach( ( cell ) => {\n    cell.x = cellX;\n    this._renderCellPosition( cell, cellX );\n    cellX += cell.size.outerWidth;\n    this.maxCellHeight = Math.max( cell.size.outerHeight, this.maxCellHeight );\n  } );\n  // keep track of cellX for wrap-around\n  this.slideableWidth = cellX;\n  // slides\n  this.updateSlides();\n  // contain slides target\n  this._containSlides();\n  // update slidesWidth\n  this.slidesWidth = this.cells.length ?\n    this.getLastSlide().target - this.slides[0].target : 0;\n};\n\nproto._renderCellPosition = function( cell, x ) {\n  // render position of cell with in slider\n  let sideOffset = this.options.rightToLeft ? -1 : 1;\n  let renderX = x * sideOffset;\n  if ( this.options.percentPosition ) renderX *= this.size.innerWidth / cell.size.width;\n  let positionValue = this.getPositionValue( renderX );\n  cell.element.style.transform = `translateX( ${positionValue} )`;\n};\n\n/**\n * cell.getSize() on multiple cells\n * @param {Array} cells - cells to size\n */\nproto._sizeCells = function( cells ) {\n  cells.forEach( ( cell ) => cell.getSize() );\n};\n\n// --------------------------  -------------------------- //\n\nproto.updateSlides = function() {\n  this.slides = [];\n  if ( !this.cells.length ) return;\n\n  let { beginMargin, endMargin } = this;\n  let slide = new Slide( beginMargin, endMargin, this.cellAlign );\n  this.slides.push( slide );\n\n  let canCellFit = this._getCanCellFit();\n\n  this.cells.forEach( ( cell, i ) => {\n    // just add cell if first cell in slide\n    if ( !slide.cells.length ) {\n      slide.addCell( cell );\n      return;\n    }\n\n    let slideWidth = ( slide.outerWidth - slide.firstMargin ) +\n      ( cell.size.outerWidth - cell.size[ endMargin ] );\n\n    if ( canCellFit( i, slideWidth ) ) {\n      slide.addCell( cell );\n    } else {\n      // doesn't fit, new slide\n      slide.updateTarget();\n\n      slide = new Slide( beginMargin, endMargin, this.cellAlign );\n      this.slides.push( slide );\n      slide.addCell( cell );\n    }\n  } );\n  // last slide\n  slide.updateTarget();\n  // update .selectedSlide\n  this.updateSelectedSlide();\n};\n\nproto._getCanCellFit = function() {\n  let { groupCells } = this.options;\n  if ( !groupCells ) return () => false;\n\n  if ( typeof groupCells == 'number' ) {\n    // group by number. 3 -> [0,1,2], [3,4,5], ...\n    let number = parseInt( groupCells, 10 );\n    return ( i ) => ( i % number ) !== 0;\n  }\n  // default, group by width of slide\n  let percent = 1;\n  // parse '75%\n  let percentMatch = typeof groupCells == 'string' && groupCells.match( /^(\\d+)%$/ );\n  if ( percentMatch ) percent = parseInt( percentMatch[1], 10 ) / 100;\n  let groupWidth = ( this.size.innerWidth + 1 ) * percent;\n  return ( i, slideWidth ) => slideWidth <= groupWidth;\n};\n\n// alias _init for jQuery plugin .flickity()\nproto._init =\nproto.reposition = function() {\n  this.positionCells();\n  this.positionSliderAtSelected();\n};\n\nproto.getSize = function() {\n  this.size = getSize( this.element );\n  this.setCellAlign();\n  this.cursorPosition = this.size.innerWidth * this.cellAlign;\n};\n\nlet cellAlignShorthands = {\n  left: 0,\n  center: 0.5,\n  right: 1,\n};\n\nproto.setCellAlign = function() {\n  let { cellAlign, rightToLeft } = this.options;\n  let shorthand = cellAlignShorthands[ cellAlign ];\n  this.cellAlign = shorthand !== undefined ? shorthand : cellAlign;\n  if ( rightToLeft ) this.cellAlign = 1 - this.cellAlign;\n};\n\nproto.setGallerySize = function() {\n  if ( !this.options.setGallerySize ) return;\n\n  let height = this.options.adaptiveHeight && this.selectedSlide ?\n    this.selectedSlide.height : this.maxCellHeight;\n  this.viewport.style.height = `${height}px`;\n};\n\nproto._updateWrapShiftCells = function() {\n  // update isWrapping\n  this.isWrapping = this.getIsWrapping();\n  // only for wrap-around\n  if ( !this.isWrapping ) return;\n\n  // unshift previous cells\n  this._unshiftCells( this.beforeShiftCells );\n  this._unshiftCells( this.afterShiftCells );\n  // get before cells\n  // initial gap\n  let beforeGapX = this.cursorPosition;\n  let lastIndex = this.cells.length - 1;\n  this.beforeShiftCells = this._getGapCells( beforeGapX, lastIndex, -1 );\n  // get after cells\n  // ending gap between last cell and end of gallery viewport\n  let afterGapX = this.size.innerWidth - this.cursorPosition;\n  // start cloning at first cell, working forwards\n  this.afterShiftCells = this._getGapCells( afterGapX, 0, 1 );\n};\n\nproto.getIsWrapping = function() {\n  let { wrapAround } = this.options;\n  if ( !wrapAround || this.slides.length < 2 ) return false;\n\n  if ( wrapAround !== 'fill' ) return true;\n  // check that slides can fit\n\n  let gapWidth = this.slideableWidth - this.size.innerWidth;\n  if ( gapWidth > this.size.innerWidth ) return true; // gap * 2x big, all good\n  // check that content width - shifting cell is bigger than viewport width\n  for ( let cell of this.cells ) {\n    if ( cell.size.outerWidth > gapWidth ) return false;\n  }\n  return true;\n};\n\nproto._getGapCells = function( gapX, cellIndex, increment ) {\n  // keep adding cells until the cover the initial gap\n  let cells = [];\n  while ( gapX > 0 ) {\n    let cell = this.cells[ cellIndex ];\n    if ( !cell ) break;\n\n    cells.push( cell );\n    cellIndex += increment;\n    gapX -= cell.size.outerWidth;\n  }\n  return cells;\n};\n\n// ----- contain & wrap ----- //\n\n// contain cell targets so no excess sliding\nproto._containSlides = function() {\n  let isContaining = this.options.contain && !this.isWrapping &&\n      this.cells.length;\n  if ( !isContaining ) return;\n\n  let contentWidth = this.slideableWidth - this.getLastCell().size[ this.endMargin ];\n  // content is less than gallery size\n  let isContentSmaller = contentWidth < this.size.innerWidth;\n  if ( isContentSmaller ) {\n    // all cells fit inside gallery\n    this.slides.forEach( ( slide ) => {\n      slide.target = contentWidth * this.cellAlign;\n    } );\n  } else {\n    // contain to bounds\n    let beginBound = this.cursorPosition + this.cells[0].size[ this.beginMargin ];\n    let endBound = contentWidth - this.size.innerWidth * ( 1 - this.cellAlign );\n    this.slides.forEach( ( slide ) => {\n      slide.target = Math.max( slide.target, beginBound );\n      slide.target = Math.min( slide.target, endBound );\n    } );\n  }\n};\n\n// ----- events ----- //\n\n/**\n * emits events via eventEmitter and jQuery events\n * @param {String} type - name of event\n * @param {Event} event - original event\n * @param {Array} args - extra arguments\n */\nproto.dispatchEvent = function( type, event, args ) {\n  let emitArgs = event ? [ event ].concat( args ) : args;\n  this.emitEvent( type, emitArgs );\n\n  if ( jQuery && this.$element ) {\n    // default trigger with type if no event\n    type += this.options.namespaceJQueryEvents ? '.flickity' : '';\n    let $event = type;\n    if ( event ) {\n      // create jQuery event\n      let jQEvent = new jQuery.Event( event );\n      jQEvent.type = type;\n      $event = jQEvent;\n    }\n    this.$element.trigger( $event, args );\n  }\n};\n\nconst unidraggerEvents = [\n  'dragStart',\n  'dragMove',\n  'dragEnd',\n  'pointerDown',\n  'pointerMove',\n  'pointerEnd',\n  'staticClick',\n];\n\nlet _emitEvent = proto.emitEvent;\nproto.emitEvent = function( eventName, args ) {\n  if ( eventName === 'staticClick' ) {\n    // add cellElem and cellIndex args to staticClick\n    let clickedCell = this.getParentCell( args[0].target );\n    let cellElem = clickedCell && clickedCell.element;\n    let cellIndex = clickedCell && this.cells.indexOf( clickedCell );\n    args = args.concat( cellElem, cellIndex );\n  }\n  // do regular thing\n  _emitEvent.call( this, eventName, args );\n  // duck-punch in jQuery events for Unidragger events\n  let isUnidraggerEvent = unidraggerEvents.includes( eventName );\n  if ( !isUnidraggerEvent || !jQuery || !this.$element ) return;\n\n  eventName += this.options.namespaceJQueryEvents ? '.flickity' : '';\n  let event = args.shift( 0 );\n  let jQEvent = new jQuery.Event( event );\n  jQEvent.type = eventName;\n  this.$element.trigger( jQEvent, args );\n};\n\n// -------------------------- select -------------------------- //\n\n/**\n * @param {Integer} index - index of the slide\n * @param {Boolean} isWrap - will wrap-around to last/first if at the end\n * @param {Boolean} isInstant - will immediately set position at selected cell\n */\nproto.select = function( index, isWrap, isInstant ) {\n  if ( !this.isActive ) return;\n\n  index = parseInt( index, 10 );\n  this._wrapSelect( index );\n\n  if ( this.isWrapping || isWrap ) {\n    index = utils.modulo( index, this.slides.length );\n  }\n  // bail if invalid index\n  if ( !this.slides[ index ] ) return;\n\n  let prevIndex = this.selectedIndex;\n  this.selectedIndex = index;\n  this.updateSelectedSlide();\n  if ( isInstant ) {\n    this.positionSliderAtSelected();\n  } else {\n    this.startAnimation();\n  }\n  if ( this.options.adaptiveHeight ) {\n    this.setGallerySize();\n  }\n  // events\n  this.dispatchEvent( 'select', null, [ index ] );\n  // change event if new index\n  if ( index !== prevIndex ) {\n    this.dispatchEvent( 'change', null, [ index ] );\n  }\n};\n\n// wraps position for wrapAround, to move to closest slide. #113\nproto._wrapSelect = function( index ) {\n  if ( !this.isWrapping ) return;\n\n  const { selectedIndex, slideableWidth, slides: { length } } = this;\n  // shift index for wrap, do not wrap dragSelect\n  if ( !this.isDragSelect ) {\n    let wrapIndex = utils.modulo( index, length );\n    // go to shortest\n    let delta = Math.abs( wrapIndex - selectedIndex );\n    let backWrapDelta = Math.abs( ( wrapIndex + length ) - selectedIndex );\n    let forewardWrapDelta = Math.abs( ( wrapIndex - length ) - selectedIndex );\n    if ( backWrapDelta < delta ) {\n      index += length;\n    } else if ( forewardWrapDelta < delta ) {\n      index -= length;\n    }\n  }\n\n  // wrap position so slider is within normal area\n  if ( index < 0 ) {\n    this.x -= slideableWidth;\n  } else if ( index >= length ) {\n    this.x += slideableWidth;\n  }\n};\n\nproto.previous = function( isWrap, isInstant ) {\n  this.select( this.selectedIndex - 1, isWrap, isInstant );\n};\n\nproto.next = function( isWrap, isInstant ) {\n  this.select( this.selectedIndex + 1, isWrap, isInstant );\n};\n\nproto.updateSelectedSlide = function() {\n  let slide = this.slides[ this.selectedIndex ];\n  // selectedIndex could be outside of slides, if triggered before resize()\n  if ( !slide ) return;\n\n  // unselect previous selected slide\n  this.unselectSelectedSlide();\n  // update new selected slide\n  this.selectedSlide = slide;\n  slide.select();\n  this.selectedCells = slide.cells;\n  this.selectedElements = slide.getCellElements();\n  // HACK: selectedCell & selectedElement is first cell in slide, backwards compatibility\n  this.selectedCell = slide.cells[0];\n  this.selectedElement = this.selectedElements[0];\n};\n\nproto.unselectSelectedSlide = function() {\n  if ( this.selectedSlide ) this.selectedSlide.unselect();\n};\n\nproto.selectInitialIndex = function() {\n  let initialIndex = this.options.initialIndex;\n  // already activated, select previous selectedIndex\n  if ( this.isInitActivated ) {\n    this.select( this.selectedIndex, false, true );\n    return;\n  }\n  // select with selector string\n  if ( initialIndex && typeof initialIndex == 'string' ) {\n    let cell = this.queryCell( initialIndex );\n    if ( cell ) {\n      this.selectCell( initialIndex, false, true );\n      return;\n    }\n  }\n\n  let index = 0;\n  // select with number\n  if ( initialIndex && this.slides[ initialIndex ] ) {\n    index = initialIndex;\n  }\n  // select instantly\n  this.select( index, false, true );\n};\n\n/**\n * select slide from number or cell element\n * @param {[Element, Number]} value - zero-based index or element to select\n * @param {Boolean} isWrap - enables wrapping around for extra index\n * @param {Boolean} isInstant - disables slide animation\n */\nproto.selectCell = function( value, isWrap, isInstant ) {\n  // get cell\n  let cell = this.queryCell( value );\n  if ( !cell ) return;\n\n  let index = this.getCellSlideIndex( cell );\n  this.select( index, isWrap, isInstant );\n};\n\nproto.getCellSlideIndex = function( cell ) {\n  // get index of slide that has cell\n  let cellSlide = this.slides.find( ( slide ) => slide.cells.includes( cell ) );\n  return this.slides.indexOf( cellSlide );\n};\n\n// -------------------------- get cells -------------------------- //\n\n/**\n * get Flickity.Cell, given an Element\n * @param {Element} elem - matching cell element\n * @returns {Flickity.Cell} cell - matching cell\n */\nproto.getCell = function( elem ) {\n  // loop through cells to get the one that matches\n  for ( let cell of this.cells ) {\n    if ( cell.element === elem ) return cell;\n  }\n};\n\n/**\n * get collection of Flickity.Cells, given Elements\n * @param {[Element, Array, NodeList]} elems - multiple elements\n * @returns {Array} cells - Flickity.Cells\n */\nproto.getCells = function( elems ) {\n  elems = utils.makeArray( elems );\n  return elems.map( ( elem ) => this.getCell( elem ) ).filter( Boolean );\n};\n\n/**\n * get cell elements\n * @returns {Array} cellElems\n */\nproto.getCellElements = function() {\n  return this.cells.map( ( cell ) => cell.element );\n};\n\n/**\n * get parent cell from an element\n * @param {Element} elem - child element\n * @returns {Flickit.Cell} cell - parent cell\n */\nproto.getParentCell = function( elem ) {\n  // first check if elem is cell\n  let cell = this.getCell( elem );\n  if ( cell ) return cell;\n\n  // try to get parent cell elem\n  let closest = elem.closest('.flickity-slider > *');\n  return this.getCell( closest );\n};\n\n/**\n * get cells adjacent to a slide\n * @param {Integer} adjCount - number of adjacent slides\n * @param {Integer} index - index of slide to start\n * @returns {Array} cells - array of Flickity.Cells\n */\nproto.getAdjacentCellElements = function( adjCount, index ) {\n  if ( !adjCount ) return this.selectedSlide.getCellElements();\n\n  index = index === undefined ? this.selectedIndex : index;\n\n  let len = this.slides.length;\n  if ( 1 + ( adjCount * 2 ) >= len ) {\n    return this.getCellElements(); // get all\n  }\n\n  let cellElems = [];\n  for ( let i = index - adjCount; i <= index + adjCount; i++ ) {\n    let slideIndex = this.isWrapping ? utils.modulo( i, len ) : i;\n    let slide = this.slides[ slideIndex ];\n    if ( slide ) {\n      cellElems = cellElems.concat( slide.getCellElements() );\n    }\n  }\n  return cellElems;\n};\n\n/**\n * select slide from number or cell element\n * @param {[Element, String, Number]} selector - element, selector string, or index\n * @returns {Flickity.Cell} - matching cell\n */\nproto.queryCell = function( selector ) {\n  if ( typeof selector == 'number' ) {\n    // use number as index\n    return this.cells[ selector ];\n  }\n  // do not select invalid selectors from hash: #123, #/. #791\n  let isSelectorString = typeof selector == 'string' && !selector.match( /^[#.]?[\\d/]/ );\n  if ( isSelectorString ) {\n    // use string as selector, get element\n    selector = this.element.querySelector( selector );\n  }\n  // get cell from element\n  return this.getCell( selector );\n};\n\n// -------------------------- events -------------------------- //\n\nproto.uiChange = function() {\n  this.emitEvent('uiChange');\n};\n\n// ----- resize ----- //\n\nproto.onresize = function() {\n  this.watchCSS();\n  this.resize();\n};\n\nutils.debounceMethod( Flickity, 'onresize', 150 );\n\nproto.resize = function() {\n  // #1177 disable resize behavior when animating or dragging for iOS 15\n  if ( !this.isActive || this.isAnimating || this.isDragging ) return;\n  this.getSize();\n  // wrap values\n  if ( this.isWrapping ) {\n    this.x = utils.modulo( this.x, this.slideableWidth );\n  }\n  this.positionCells();\n  this._updateWrapShiftCells();\n  this.setGallerySize();\n  this.emitEvent('resize');\n  // update selected index for group slides, instant\n  // TODO: position can be lost between groups of various numbers\n  let selectedElement = this.selectedElements && this.selectedElements[0];\n  this.selectCell( selectedElement, false, true );\n};\n\n// watches the :after property, activates/deactivates\nproto.watchCSS = function() {\n  if ( !this.options.watchCSS ) return;\n\n  let afterContent = getComputedStyle( this.element, ':after' ).content;\n  // activate if :after { content: 'flickity' }\n  if ( afterContent.includes('flickity') ) {\n    this.activate();\n  } else {\n    this.deactivate();\n  }\n};\n\n// ----- keydown ----- //\n\n// go previous/next if left/right keys pressed\nproto.onkeydown = function( event ) {\n  let { activeElement } = document;\n  let handler = Flickity.keyboardHandlers[ event.key ];\n  // only work if element is in focus\n  if ( !this.options.accessibility || !activeElement || !handler ) return;\n\n  let isFocused = this.focusableElems.some( ( elem ) => activeElement === elem );\n  if ( isFocused ) handler.call( this );\n};\n\nFlickity.keyboardHandlers = {\n  ArrowLeft: function() {\n    this.uiChange();\n    let leftMethod = this.options.rightToLeft ? 'next' : 'previous';\n    this[ leftMethod ]();\n  },\n  ArrowRight: function() {\n    this.uiChange();\n    let rightMethod = this.options.rightToLeft ? 'previous' : 'next';\n    this[ rightMethod ]();\n  },\n};\n\n// ----- focus ----- //\n\nproto.focus = function() {\n  this.element.focus({ preventScroll: true });\n};\n\n// -------------------------- destroy -------------------------- //\n\n// deactivate all Flickity functionality, but keep stuff available\nproto.deactivate = function() {\n  if ( !this.isActive ) return;\n\n  this.element.classList.remove('flickity-enabled');\n  this.element.classList.remove('flickity-rtl');\n  this.unselectSelectedSlide();\n  // destroy cells\n  this.cells.forEach( ( cell ) => cell.destroy() );\n  this.viewport.remove();\n  // move child elements back into element\n  this.element.append( ...this.slider.children );\n  if ( this.options.accessibility ) {\n    this.element.removeAttribute('tabIndex');\n    this.element.removeEventListener( 'keydown', this );\n  }\n  // set flags\n  this.isActive = false;\n  this.emitEvent('deactivate');\n};\n\nproto.destroy = function() {\n  this.deactivate();\n  window.removeEventListener( 'resize', this );\n  this.allOff();\n  this.emitEvent('destroy');\n  if ( jQuery && this.$element ) {\n    jQuery.removeData( this.element, 'flickity' );\n  }\n  delete this.element.flickityGUID;\n  delete instances[ this.guid ];\n};\n\n// -------------------------- prototype -------------------------- //\n\nObject.assign( proto, animatePrototype );\n\n// -------------------------- extras -------------------------- //\n\n/**\n * get Flickity instance from element\n * @param {[Element, String]} elem - element or selector string\n * @returns {Flickity} - Flickity instance\n */\nFlickity.data = function( elem ) {\n  elem = utils.getQueryElement( elem );\n  if ( elem ) return instances[ elem.flickityGUID ];\n};\n\nutils.htmlInit( Flickity, 'flickity' );\n\nlet { jQueryBridget } = window;\nif ( jQuery && jQueryBridget ) {\n  jQueryBridget( 'flickity', Flickity, jQuery );\n}\n\n// set internal jQuery, for Webpack + jQuery v3, #478\nFlickity.setJQuery = function( jq ) {\n  jQuery = jq;\n};\n\nFlickity.Cell = Cell;\nFlickity.Slide = Slide;\n\nreturn Flickity;\n\n} ) );\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}